{"version":3,"sources":["Editor.js","Preview.js","App.js","index.js"],"names":["Editor","props","className","id","type","value","markdown","onChange","Preview","dangerouslySetInnerHTML","getMarkdown","marked","setOptions","breaks","App","state","placehoder","handleChange","bind","event","this","setState","target","__html","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAaeA,EAbA,SAACC,GACd,OACE,sBAAKC,UAAU,SAAf,UACE,wCACA,0BACEC,GAAG,SACHC,KAAK,OACLC,MAAOJ,EAAMK,SACbC,SAAUN,EAAMM,eCCTC,EATC,SAACP,GACf,OACE,sBAAKC,UAAU,UAAf,UACE,2CACA,qBAAKC,GAAG,UAAUM,wBAAyBR,EAAMS,kB,gBCAvDC,IAAOC,WAAW,CAChBC,QAAQ,I,IAGJC,E,kDACJ,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXT,SAAUU,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,yDAQNC,GACXC,KAAKC,SAAS,CACZf,SAAUa,EAAMG,OAAOjB,U,oCAKzB,MAAO,CAAEkB,OAAQZ,IAAOS,KAAKL,MAAMT,a,+BAInC,OACE,gCACE,oBAAIJ,UAAU,QAAd,6CACA,sBAAKA,UAAU,kBAAf,UACE,cAAC,EAAD,CAAQK,SAAUa,KAAKH,aAAcX,SAAUc,KAAKL,MAAMT,WAC1D,cAAC,EAAD,CAASI,YAAaU,KAAKV,0B,GAzBnBc,IAAMC,WAgClBT,EAAU,4gCA2CDF,IC9EfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2b617597.chunk.js","sourcesContent":["const Editor = (props) => {\r\n  return (\r\n    <div className=\"editor\">\r\n      <h3>Editor</h3>\r\n      <textarea\r\n        id=\"editor\"\r\n        type=\"text\"\r\n        value={props.markdown}\r\n        onChange={props.onChange}\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\nexport default Editor;\r\n","const Preview = (props) => {\r\n  return (\r\n    <div className=\"preview\">\r\n      <h3>Previewer</h3>\r\n      <div id=\"preview\" dangerouslySetInnerHTML={props.getMarkdown}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\nimport marked from \"marked\";\nmarked.setOptions({\n  breaks: true,\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: placehoder,\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value,\n    });\n  }\n\n  getMarkdown() {\n    return { __html: marked(this.state.markdown) };\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"title\">Simple React Markdown Previewer</h1>\n        <div className=\"flex-container \">\n          <Editor onChange={this.handleChange} markdown={this.state.markdown} />\n          <Preview getMarkdown={this.getMarkdown()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst placehoder = `\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://picsum.photos/200)\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}